#!/usr/bin/env bash
set -e

ARCH=""

generate_target_cmake() {
    local TARGET_DIR="$1"
    local TARGET_NAME="$2"  # e.g. "native" or "aarch64-linux-gnu"
    local TARGET_TRIPLE SYSTEM_NAME PROCESSOR IS_NATIVE

    if [[ "$TARGET_NAME" == "native" ]]; then
        IS_NATIVE="yes"

        # Derive host triple automatically from clang if available
        if command -v clang >/dev/null 2>&1; then
            TARGET_TRIPLE="$(clang -dumpmachine 2>/dev/null)"
        else
            # Fallback: uname-based approximation
            case "$(uname -s)" in
                Linux*)   TARGET_TRIPLE="$(uname -m)-linux-gnu" ;;
                Darwin*)  TARGET_TRIPLE="$(uname -m)-apple-darwin" ;;
                MINGW*|MSYS*|CYGWIN*) TARGET_TRIPLE="$(uname -m)-windows-msvc" ;;
                *)        TARGET_TRIPLE="$(uname -m)-unknown" ;;
            esac
        fi
        SYSTEM_NAME="$(uname -s)"
        PROCESSOR="$(uname -m)"
    else
        IS_NATIVE="no"
        TARGET_TRIPLE="$TARGET_NAME"

        # Infer system name from the triple suffix
        if [[ "$TARGET_TRIPLE" == *"linux"* ]]; then
            SYSTEM_NAME="Linux"
        elif [[ "$TARGET_TRIPLE" == *"darwin"* ]]; then
            SYSTEM_NAME="Darwin"
        elif [[ "$TARGET_TRIPLE" == *"windows"* || "$TARGET_TRIPLE" == *"mingw"* ]]; then
            SYSTEM_NAME="Windows"
        else
            SYSTEM_NAME="Generic"
        fi

        # Extract processor (before first dash)
        PROCESSOR="${TARGET_TRIPLE%%-*}"
    fi

    ARCH="$PROCESSOR"
    echo "🧩 Generating target.cmake for $TARGET_TRIPLE ($SYSTEM_NAME)"

    cat > "$TARGET_DIR/target.cmake" <<EOF
# Auto-generated by Silver bootstrap
# Toolchain for $TARGET_NAME ($TARGET_TRIPLE)

set(CMAKE_SYSTEM_NAME $SYSTEM_NAME)
set(CMAKE_SYSTEM_PROCESSOR $PROCESSOR)

get_filename_component(TARGET_DIR "\${CMAKE_CURRENT_LIST_FILE}" PATH)
set(CMAKE_SYSROOT "\${TARGET_DIR}")

set(CMAKE_C_COMPILER   "\${TARGET_DIR}/../native/bin/clang")
set(CMAKE_CXX_COMPILER "\${TARGET_DIR}/../native/bin/clang++")
set(CMAKE_LINKER       "\${TARGET_DIR}/../native/bin/ld.lld")

if(NOT DEFINED CMAKE_C_FLAGS)
    set(CMAKE_C_FLAGS "")
endif()
if(NOT DEFINED CMAKE_CXX_FLAGS)
    set(CMAKE_CXX_FLAGS "")
endif()
EOF

    if [[ "$IS_NATIVE" != "yes" ]]; then
        cat >> "$TARGET_DIR/target.cmake" <<EOF
string(APPEND CMAKE_C_FLAGS   " --target=${TARGET_TRIPLE} --sysroot=\${CMAKE_SYSROOT} -fPIC")
string(APPEND CMAKE_CXX_FLAGS " --target=${TARGET_TRIPLE} --sysroot=\${CMAKE_SYSROOT} -fPIC -stdlib=libc++")
EOF
    else
        cat >> "$TARGET_DIR/target.cmake" <<'EOF'
string(APPEND CMAKE_C_FLAGS   " -fPIC")
string(APPEND CMAKE_CXX_FLAGS " -fPIC -stdlib=libc++")
EOF
    fi

    cat >> "$TARGET_DIR/target.cmake" <<'EOF'

set(CMAKE_EXE_LINKER_FLAGS "-fuse-ld=lld")
set(CMAKE_FIND_ROOT_PATH "\${CMAKE_SYSROOT}")
set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)

set(SILVER_TARGET_NAME "${TARGET_NAME}")
set(SILVER_TARGET_TRIPLE "${TARGET_TRIPLE}")
EOF
}

# install Xcode tools (base clang and sdk)
if [[ "$OSTYPE" == "darwin"* ]]; then
    if ! command -v clang >/dev/null 2>&1 && ! command -v gcc >/dev/null 2>&1; then
        echo "🛠️  macOS command line tools not found. Installing..."
        xcode-select --install || true
        until command -v clang >/dev/null 2>&1 || command -v gcc >/dev/null 2>&1; do
            sleep 2
        done
    fi
fi

# defaults
export SDK="native"
export TYPE="debug"

# parse command-line args
for arg in "$@"; do
    case "$arg" in
        --debug)
            TYPE="debug"
            ;;
        --release)
            TYPE="release"
            ;;
        *)
            SDK="$arg"
            ;;
    esac
done

export PROJECT="$(realpath $(pwd))" # we can run bootstrap from another project (silver build is its own host)
export PROJECT_NAME="$(dirname "$PROJECT")"

SELF_PATH="$(realpath $(dirname "$0"))"
cd "$SELF_PATH"

export SILVER="$(pwd)"
export CHECKOUT="$PROJECT/checkout"
export IMPORT="$SILVER/sdk/$SDK"
export NATIVE="$SILVER/sdk/native"
export BUILD="$IMPORT/$TYPE"
export PATH="$IMPORT/bin:$PATH"
export ARCH="$ARCH"

export LD_LIBRARY_PATH="$IMPORT/lib:$LD_LIBRARY_PATH"

mkdir -p "$IMPORT" "$IMPORT/include" "$IMPORT/bin" "$IMPORT/lib" \
    "$NATIVE" "$NATIVE/include" "$NATIVE/bin" "$NATIVE/lib" \
    "$CHECKOUT" "$BUILD" "$SILVER/checkout"

cd $SILVER

generate_target_cmake "$IMPORT" "$SDK"

if [[ "$SDK" != "native" ]]; then
    if ! [ -f "$NATIVE/bin/clang" ]; then
        echo "please bootstrap native first to build llvm"
        exit 1
    fi
fi

# download source for ninja and build
if ! [ -f "$NATIVE/bin/ninja" ]; then
    ninja_f="v1.13.1"
    NINJA_URL="https://github.com/ninja-build/ninja/archive/refs/tags/${ninja_f}.zip"
    cd $SILVER/checkout
    curl -LO $NINJA_URL
    unzip -o "${ninja_f}.zip"
    cd ninja-1.13.1
    cmake -Bbuild-cmake -DBUILD_TESTING=OFF
    cmake --build build-cmake
    cp -a build-cmake/ninja $NATIVE/bin/ninja
fi

if ! [ -f "$NATIVE/bin/python3" ]; then
    PY_VER="3.11.9"
    PY_SRC="$SILVER/checkout/Python-$PY_VER"

    cd "$SILVER/checkout"
    curl -LO "https://www.python.org/ftp/python/$PY_VER/Python-$PY_VER.tgz"
    tar -xf "Python-$PY_VER.tgz"
    cd "Python-$PY_VER"

    CC=gcc ./configure --prefix=$NATIVE --enable-shared --with-ensurepip=install
    make -j$(sysctl -n hw.ncpu)
    make install


    cd "$SILVER/checkout"
    curl -LO https://github.com/swig/swig/archive/refs/tags/v4.1.1.tar.gz
    tar -xf v4.1.1.tar.gz
    cd swig-4.1.1

    ./autogen.sh || true
    ./configure \
    --prefix=$NATIVE \
    --with-python=$NATIVE/bin/python3 \
    --without-pcre  # optional; system PCRE is usually fine

    make -j$(nproc)
    make install
fi

if [[ "$SDK" != "native" ]]; then

    # build builtins for ARCH
    if [ -f "$SDK/lib/clang/22/lib/linux/libclang_rt.builtins-${ARCH}.a2" ]; then

        echo "building builtins for ${ARCH}"

        BUILD_DIR="$NATIVE/release/compiler-rt-$SDK"
        mkdir -p "$BUILD_DIR"
        cd "$BUILD_DIR"

        cmake -G Ninja $SILVER/checkout/llvm-project/compiler-rt \
            -DCMAKE_C_COMPILER=$NATIVE/bin/clang \
            -DCMAKE_CXX_COMPILER=$NATIVE/bin/clang++ \
            -DCMAKE_C_COMPILER_TARGET="$SDK" \
            -DCMAKE_BUILD_TYPE=Release \
            -DCOMPILER_RT_BUILD_BUILTINS=ON \
            -DCOMPILER_RT_DEFAULT_TARGET_ONLY=ON \
            -DCMAKE_EXE_LINKER_FLAGS="-fuse-ld=lld" \
            -DCMAKE_INSTALL_PREFIX=$NATIVE \
            -DCMAKE_SYSROOT=$IMPORT \
            -DCMAKE_TRY_COMPILE_TARGET_TYPE=STATIC_LIBRARY
        
        ninja install
        echo "installed $ARCH, check $SDK/lib/clang/22/lib/linux/libclang_rt.builtins-${ARCH}.a"
        exit 0
    fi

    # build musl
    if ! [ -f "$IMPORT/usr/lib/libc.a" ]; then
        cd "$SILVER/checkout"
        curl -LO https://toolchains.bootlin.com/downloads/releases/sources/musl-1.2.5/musl-1.2.5.tar.gz
        tar -xf musl-1.2.5.tar.gz
        cd musl-1.2.5
        CC="$NATIVE/bin/clang --target=$SDK --sysroot=$IMPORT -fuse-ld=lld" \
        CXX="$NATIVE/bin/clang++ --target=$SDK --sysroot=$IMPORT -fuse-ld=lld" \
        AR="$NATIVE/bin/llvm-ar" \
        RANLIB="$NATIVE/bin/llvm-ranlib" \
        LD="$NATIVE/bin/ld.lld" \
        ./configure \
            --target=$SDK \
            --host=$SDK \
            --prefix=/usr \
            CROSS_COMPILE="$NATIVE/bin/" \
            CC_LD="$NATIVE/bin/ld.lld"
        make LDFLAGS="$NATIVE/lib/clang/22/lib/linux/libclang_rt.builtins-aarch64.a" -j$(nproc)
        make install DESTDIR="$IMPORT"
    fi

    # build glibc for non-native sdk
    if ! [ -f "$IMPORT/usr/include/stdio.h" ]; then
        cd "$SILVER/checkout"
        mkdir -p "$SILVER/build/glibc-$SDK"
        cd "$SILVER/checkout"

        if ! [ -d glibc-2.39 ]; then
            curl -LO https://mirrors.dotsrc.org/gnu/libc/glibc-2.39.tar.xz
            tar -xf glibc-2.39.tar.xz
        fi

        cd "$SILVER/build/glibc-$SDK"

        CC="$SILVER/sdk/native/bin/clang --target=${SDK} --sysroot=$SILVER/sdk/$SDK" \
        CXX="$SILVER/sdk/native/bin/clang++ --target=${SDK} --sysroot=$SILVER/sdk/$SDK" \
        AR="$SILVER/sdk/native/bin/llvm-ar" \
        RANLIB="$SILVER/sdk/native/bin/llvm-ranlib" \
        "$SILVER/checkout/glibc-2.39/configure" \
            --host=${SDK} \
            --prefix=/usr \
            --enable-shared \
            --disable-werror

        make -j"$(nproc)"
        make install DESTDIR="$IMPORT"
    fi
fi

# build gcc for non-native sdk
if [[ "$SDK" != "native" ]]; then
    if ! [ -f "$IMPORT/usr/lib/${SDK}/libstdc++.so" ]; then
        echo "building gcc for $SDK ..."
        mkdir -p "$SILVER/build/gcc-$SDK"
        cd "$SILVER/checkout"

        if ! [ -f gcc-14.1.0.tar.xz ]; then
            curl -LO https://mirrors.dotsrc.org/gnu/gcc/gcc-14.1.0/gcc-14.1.0.tar.xz
        fi
        tar -xf gcc-14.1.0.tar.xz

        cd "$SILVER/build/gcc-$SDK"

        # only build libgcc + libstdc++
        "$SILVER/checkout/gcc-14.1.0/configure" \
            --host=${SDK} \
            --target=${SDK} \
            --prefix=/usr \
            --disable-multilib \
            --disable-nls \
            --enable-shared \
            --disable-bootstrap \
            --enable-languages=c,c++ \
            CC="$SILVER/sdk/native/bin/clang --target=${SDK} --sysroot=$SILVER/sdk/$SDK" \
            CXX="$SILVER/sdk/native/bin/clang++ --target=${SDK} --sysroot=$SILVER/sdk/$SDK" \
            AR="$SILVER/sdk/native/bin/llvm-ar" \
            RANLIB="$SILVER/sdk/native/bin/llvm-ranlib"

        make -j"$(nproc)" all-target-libgcc all-target-libstdc++-v3
        make install-target-libgcc install-target-libstdc++-v3 DESTDIR="$IMPORT"
    fi
fi

if [ -n "$ZSH_VERSION" ]; then
    rehash 2>/dev/null || true
elif [ -n "$BASH_VERSION" ]; then
    hash -r 2>/dev/null || true
elif [ -n "$FISH_VERSION" ]; then
    builtin functions -q rehash && rehash 2>/dev/null || true
elif [ -n "$TCSH_VERSION" ] || [ -n "$CSH_VERSION" ]; then
    rehash 2>/dev/null || true
else
    # fallback: force PATH refresh by launching a subshell
    exec $SHELL -l
fi

(
    cd $SILVER
    echo 'running import?'
    python3 import.py --import $IMPORT --$TYPE --project-path $PROJECT --build-path $BUILD --project $PROJECT_NAME $SDK
    python3 gen.py    --import $IMPORT --$TYPE --project-path $PROJECT --build-path $BUILD --project $PROJECT_NAME $SDK
)