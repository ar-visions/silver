# todo: should be checked out and installed without import, since A is our runtime
import https://github.com/ar-visions/A

# includes are part of an install process, and selecting them is used with import < includes paths >
# easiest path is to use syntax for each type of entry, and not have field names with token parsing
# we want it to be more import-like
# todo: <include, file, handling> inside of import, to directly inject into <import>
# A-type projects are handled currently, but we
import https://github.com/ar-visions/dawn@2e9297c4
    -DDAWN_ENABLE_INSTALL=1
    -DBUILD_SHARED_LIBS=0
    -lwebgpu_dawn
    <dawn/webgpu, dawn/dawn_proc_table>

import <stdlib stdint stdio>


class new-class
    i: i32
    init[] > none
        print['initializing']
    
# silver 1.0: inlay
# they become contiguous and embedded into the instance with inlay
# this applies to classes and primitives, classes become n-depth embeddable and this basically removes the need for struct?
# its also a better way to design delegation in general; certainly better for cache as well
# inlay gives you a bit of handy object design

# asm/arch/feature switch
# default required when we do features 

##
asm [
    target[ x64 ]
        feature[ SSE4 ]
            mov eax, ebx
            xor eax, eax
        default
            mov eax, ebx
            xor eax, eax
    default
        LLVM IR code <- not super trivial to get IR in silver
]
##

class app [
    int member 
    int member2

    # WGPUAdapter in C99 is a struct WGPUAdapterImpl* type (opaque-reference)
    static intern none onAdapterRequestEnded[
            WGPURequestAdapterStatus status, WGPUAdapter adapter,
            symbol message, handle userdata] [

        # no ability to construct with var args
        # array::i64 ar : [ 1, 2, 3, 4, 5 ]

        ref handle u: ref userdata
        handle something: userdata

        u: something
        return
    ]

    # ----------------------------------------------
    # handle string literals converting to 'string'
    # context functions are forced into being intern
    # also i am not going to really support a public import unless we can properly register imported types
    # there is the possibility of switching to clang
    # ----------------------------------------------
    intern bool a_context_fn[ i64 i :: i32 ctx ] [
        if [ i == 0 ] [ return false ]

        return true
    ]

    num run [] [
        # we may use fn if type assignment
        fn lambda : sub a_context_fn [ 1 ]
        # verify this
        
        lambda[ 2 ] # implement this interpretation
        string a_val: 'this is a string'
        # C99: create ctx struct, and caller method
        return 0
    ]
]