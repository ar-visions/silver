#ifndef _IMAGE_
#define _IMAGE_

#define Pixel_schema(E,T,Y,...) \
    enum_value_v(E,T,Y, none,            0) \
    enum_value_v(E,T,Y, rgba8,           1) \
    enum_value_v(E,T,Y, rgb8,            2) \
    enum_value_v(E,T,Y, rgbf32,          3) \
    enum_value_v(E,T,Y, u8,              4) \
    enum_value_v(E,T,Y, rgbaf32,         5) \
    enum_value_v(E,T,Y, f32,             6)
declare_enum(Pixel)

// a good idea is to make this more of 'ANY' ability of filter
// if filter set to an object, that object could dictate more filter arguments for a general purpose filter
// this is something used by the system
#define Filter_schema(E,T,Y,...) \
    enum_value_v(E,T,Y, none,            0) \
    enum_value_v(E,T,Y, nearest,         1) \
    enum_value_v(E,T,Y, bilinear,        3) \
    enum_value_v(E,T,Y, trilinear,       4) \
    enum_value_v(E,T,Y, low,             5) \
    enum_value_v(E,T,Y, med,             6) \
    enum_value_v(E,T,Y, high,            7)
declare_enum(Filter)

#define Surface_schema(E,T,Y,...) \
    enum_value(E,T,Y, none,           0) \
    enum_value(E,T,Y, color,          1) \
    enum_value(E,T,Y, normal,         2) \
    enum_value(E,T,Y, emission,       3) \
    enum_value(E,T,Y, rough,          4) \
    enum_value(E,T,Y, metal,          5) \
    enum_value(E,T,Y, height,         6) \
    enum_value(E,T,Y, ao,             7) \
    enum_value(E,T,Y, ior,            8) \
    enum_value(E,T,Y, environment,    9)
declare_enum(Surface)


#define join_schema(E,T,Y,...) \
    enum_value_v(E,T,Y, none,       0) \
    enum_value_v(E,T,Y, miter,      1) \
    enum_value_v(E,T,Y, round,      2) \
    enum_value_v(E,T,Y, bevel,      3)
declare_enum(join)


#define cap_schema(E,T,Y,...) \
    enum_value_v(E,T,Y, none,       0) \
    enum_value_v(E,T,Y, round,      1) \
    enum_value_v(E,T,Y, square,     2)
declare_enum(cap)

#define variant_schema(E,T,Y,...) \
    enum_value_v(E,T,Y, none,       0) \
    enum_value_v(E,T,Y, small_caps, 1) \
    enum_value_v(E,T,Y, mono,       2)
declare_enum(variant)

#define font_schema(X,Y,...) \
    i_prop    (X,Y, public,   path,    uri) \
    i_prop    (X,Y, public,   bool,    bold) \
    i_prop    (X,Y, public,   bool,    italic) \
    i_prop    (X,Y, public,   bool,    underline) \
    i_prop    (X,Y, public,   variant, variant) \
    i_prop    (X,Y, public,   f32,     size) \
    i_prop    (X,Y, public,   f32,     kerning) \
    i_prop    (X,Y, opaque,   handle,  res) \
    i_prop    (X,Y, opaque,   handle,  tf) \
    i_override(X,Y, method, copy) \
    i_override(X,Y, method, init) \
    i_override(X,Y, method, dealloc)
declare_class(font)

#ifdef __cplusplus
extern "C" {
#endif
none set_font_manager(hook init, hook dealloc);
#ifdef __cplusplus
}
#endif

#define image_schema(X,Y,...) \
    i_ctr     (X,Y,    public,     string) \
    i_ctr     (X,Y,    public,     symbol) \
    i_ctr     (X,Y,    public,     cstr) \
    i_prop    (X,Y,    public,     path,                   uri) \
    i_prop    (X,Y,    public,     Surface,                surface) \
    i_prop    (X,Y,    public,     Pixel,                  format) \
    i_prop    (X,Y,    public,     i32,                    pixel_size) \
    i_prop    (X,Y,    public,     i32,                    width) \
    i_prop    (X,Y,    public,     i32,                    height) \
    i_prop    (X,Y,    public,     i32,                    channels) \
    i_prop    (X,Y,    public,     A,                      source) \
    i_prop    (X,Y,    public,     Filter,                 filter) \
    i_prop    (X,Y,    public,     A,                      user) \
    i_prop    (X,Y,    opaque,     handle,                 res) \
    i_prop    (X,Y,    opaque,     hook,                   res_dealloc) \
    i_prop    (X,Y,    opaque,     ARef,                   res_bits) \
    i_method  (X,Y,    public,     image,                  gaussian, f32) \
    i_method  (X,Y,    public,     image,                  resize, i32, i32) \
    i_method  (X,Y,    public,     i32,                    png, path) \
    i_method  (X,Y,    public,     i32,                    exr, path) \
    i_method  (X,Y,    public,     i64,                    byte_count) \
    i_method  (X,Y,    public,     i64,                    len) \
    i_method  (X,Y,    public,     A,                      get, num) \
    i_override(X,Y,    method,     init) \
    i_override(X,Y,    method,     dealloc) \
    i_override(X,Y,    method,     copy)
declare_class(image, i32)

#endif