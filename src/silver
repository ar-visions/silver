#ifndef _silver_
#define _silver_

#define import_t_schema(E,T,Y,...) \
    enum_value(E,T,Y, none,       0) \
    enum_value(E,T,Y, source,     1) \
    enum_value(E,T,Y, library,    2) \
    enum_value(E,T,Y, project,    3) \
    enum_value(E,T,Y, includes,   4)
declare_enum(import_t)

#define build_state_schema(E,T,Y,...) \
    enum_value(E,T,Y, none,       0) \
    enum_value(E,T,Y, built,      1)
declare_enum(build_state)

#define language_schema(E,T,Y,...) \
    enum_value(E,T,Y, silver, 0)
declare_enum(language)

#define completer_context_schema(X,Y,...) \
    i_prop(X,Y, required, model,    data) \
    i_prop(X,Y, required, array,    body)
declare_class(completer_context)

#define silver_schema(X,Y,...)\
    i_prop    (X,Y, intern,     import,         import) \
    i_prop    (X,Y, intern,     bool,           no_build) \
    i_prop    (X,Y, intern,     bool,           in_ref) \
    i_prop    (X,Y, intern,     bool,           in_top) \
    i_prop    (X,Y, intern,     bool,           in_const) \
    i_prop    (X,Y, intern,     bool,           in_left) \
    i_prop    (X,Y, intern,     bool,           in_inlay) \
    i_prop    (X,Y, intern,     bool,           prebuild) \
    i_prop    (X,Y, intern,     member,         in_assign) \
    i_prop    (X,Y, intern,     array,          imports) \
    i_prop    (X,Y, intern,     array,          main_symbols) \
    i_prop    (X,Y, intern,     array,          compiled_objects) \
    i_prop    (X,Y, intern,     array,          products_used) \
    i_prop    (X,Y, intern,     map,            include) \
    i_prop    (X,Y, intern,     int,            expr_level) \
    i_prop    (X,Y, public,     path,           file) \
    i_prop    (X,Y, public,     array,          tokens) \
    i_prop    (X,Y, public,     num,            cursor) \
    i_prop    (X,Y, public,     language,       std) \
    i_prop    (X,Y, intern,     array,          stack) \
    i_method  (X,Y, public,     silver,         load_module, path) \
    i_method  (X,Y, public,     node,           parse_member_expr, member) \
    i_method  (X,Y, public,     none,           incremental_resolve) \
    i_method  (X,Y, public,     none,           push_state,   array, num) \
    i_method  (X,Y, public,     none,           push_current) \
    i_method  (X,Y, public,     none,           pop_state, bool) \
    i_method  (X,Y, public,     token,          next) \
    i_method  (X,Y, public,     token,          prev) \
    i_method  (X,Y, public,     token,          navigate, i32) \
    i_method  (X,Y, public,     token,          consume) \
    i_method  (X,Y, public,     token,          peek) \
    i_method  (X,Y, public,     token,          element, num) \
    i_method  (X,Y, public,     num,            current_line) \
    i_method  (X,Y, public,     bool,           next_is,       symbol) \
    i_method  (X,Y, public,     bool,           next_is_alpha) \
    i_method  (X,Y, public,     bool,           next_is_keyword) \
    i_method  (X,Y, public,     array,          namespace_push) \
    i_method  (X,Y, public,     none,           namespace_pop, array) \
    i_method  (X,Y, public,     node,           read_node, AType) \
    i_method  (X,Y, public,     node,           parse_ternary, node) \
    i_method  (X,Y, public,     node,           parse_assignment, member, string) \
    i_method  (X,Y, public,     token,          read, symbol) \
    i_method  (X,Y, public,     object,         read_literal, AType) \
    i_method  (X,Y, public,     string,         read_string) \
    i_method  (X,Y, public,     string,         read_alpha) \
    i_method  (X,Y, public,     member,         read_def) \
    i_method  (X,Y, public,     string,         peek_def) \
    i_method  (X,Y, public,     string,         peek_keyword) \
    i_method  (X,Y, public,     string,         read_keyword) \
    i_method  (X,Y, public,     object,         read_bool) \
    i_method  (X,Y, public,     object,         read_numeric) \
    i_method  (X,Y, public,     string,         read_assign, ARef, ARef) \
    i_method  (X,Y, public,     string,         location) \
    i_method  (X,Y, public,     none,           parse) \
    i_override(X,Y, method,     build_initializer) \
    i_override(X,Y, method,     init)
declare_class_3(silver, ether, model)


/// major change to model here, with most work on software import happening in import
/// process will perform actions needed by silver-only import
/// does import also perform silver compilation, or stand-alone C compilation?
/// it might make sense to do so; inter-dependency is what is of issue.  import would need
/// to use silver at a binary level in that case (which to me is simpler)
/// it is the interface that we do not have.  for this, do we want .m standard?  (A-reflect emission)
/// this works for silver, C and possibly others.  the two are what we want to handle for now
/// unclear what the path is for project imports.  clearly there would be multiple .m reflection interfaces
/// in the case of standard C we would use typical Clang Indexer service

/// import url is going to infer the project type, internal to  import
///     <header> may be part of the syntax, if we are to use a specific header
/// import url -llibrary
///     include <something>
///     

#define Import_schema(X,Y,...) \
    i_prop    (X,Y, intern, array,      source) \
    i_prop    (X,Y, intern, string,     shell) \
    i_prop    (X,Y, intern, path,       module_path) \
    i_prop    (X,Y, intern, bool,       imported) \
    i_prop    (X,Y, intern, array,      includes, meta, path) \
    i_prop    (X,Y, intern, array,      modules,  meta, path) \
    i_prop    (X,Y, intern, path,       include_path) \
    i_prop    (X,Y, intern, string,     namespace) \
    i_prop    (X,Y, intern, array,      links) \
    i_prop    (X,Y, intern, array,      cfiles) \
    i_prop    (X,Y, intern, array,      products) \
    i_prop    (X,Y, intern, array,      build_args) \
    i_prop    (X,Y, intern, import_t,   import_type) \
    i_prop    (X,Y, intern, array,      library_exports) \
    i_prop    (X,Y, intern, interface,  visibility) \
    i_prop    (X,Y, intern, string,     main_symbol) \
    i_prop    (X,Y, intern, bool,       assemble_so) \
    i_prop    (X,Y, intern, bool,       skip_process) \
    i_prop    (X,Y, intern, bool,       anonymous) \
    i_prop    (X,Y, intern, silver,     extern_mod) \
    i_method  (X,Y, public, none,       process) \
    i_override(X,Y, method, init)
declare_class_2(Import, model)

#endif