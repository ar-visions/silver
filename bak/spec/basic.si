class base [
    short method-name[int arg, bool arg2] [
        return 1
    ]
    init [
        console.log['base initialized']
    ]

    int subscript[short s] [
        return [int]0
    ]

    bool [
        return true
    ]

    # assign-add operator
    base assign-add [base b] [
        return this
    ]
]

##
# parse this
class aclass : base [
    public short i
    # its important to use the brackets everywhere

    int[] member-data: [ 1, 2, 3, 4 ]

    # nameless function type
    int*[int,int] method-name[int arg, int arg2] [
        # we are nameless!
        int named[int,int]: [int x, int y] [ return x + y + 1 ] 
        return [int, int] [ return named[0, 0] ]
    ]

    # using .. for namespace navigation
    lambda-name method-name[int arg, int arg2] [
        # copies of these arg, arg2 are made at runtime
        # for each member referenced, copies are made into struct
        lambda-name r: [int arg, arg2] [
            int a: arg  + ..arg
            int b: arg2 + ..arg2
            return a + b
        ]
        return r
    ]

    int[] lambda[var v, i8 i]: [

        // lambda forms:
        // anonymous: r-type*[arg-1, arg-2]
        // named:     replace * with a alpha-ident token separate from r-type
        
        //lambda::r-type::arg-1::arg-2
        
        //r-type[arg-1, arg-2]

        // class[ named-arg1:2, arg2:2 ]
        // type:arg1:arg2
        // 
        // class[ named-arg: type::arg1::arg2[] ]
        // --------------
        // 
        // 
        return [[int]v + i]
    ]

    int lambda[var v, i8 i, int lambda_type[string]]: null

    int[string] map

    int[] array_state

    aclass[num i] [
        i:i
    ]

    int[] [
    ]

    int[] array_of_objects: [
        1, 2, 3, 4
    ]

    int[] array_function [
        return [ 1, 2, 3, 4 ]
    ]

    i64[] valid: [1,2]

    int a_lambda[int i]: none

    aclass add[aclass b] [
        return aclass[i + b.i]
    ]
]
##

##
a = aclass(i: 1) # all members set except for i, then i set, then init called (no constructor called -- but what about base?)
b = aclass(1)
##

##
class bclass [
    aclass[] instances

    i32, aclass dosomething2(aclass a, aclass another, aclass another2) {
        instances += a # M(array, push, instances, a) <- will increment ref
        # we dont hold or drop args in methods, its up to the caller to do that (although, thats WAY more code, lol)
        # is it a substitute to release at the end of a method?
        # i just think if methods do it for args in 1 spot, then we arent doing it for args in all method calls.
        # that would be more code
        return 1, another2 # another2 gets a ref increased here # we can handle this with a goto in C99
    }

    num dosomething1[] [
        aclass another # default constructed (always possible with these objects)
        if [true] [
            aclass arg1 = aclass(2)
            i32 v0, aclass v1 = dosomething2(arg1 + another + another, another, aclass(1))
            # aclass(1) will drop here
            num some_other = 2
            # arg1 will drop here
            # v1 will drop here (actually dropping aclass(1))
        ]
        # another will drop here
        return 1
    ]
]
##

##
C99 version:

#define aclass_meta(X,Y,Z) \
    public(X,Y,Z, short, i) \
    imethod(X,Y,Z, T, add, aclass)
declare_class(aclass)
define_class(aclass, A)

#define bclass_meta(X,Y,Z) \
    property(X,Y,Z, array, instances) \
    imethod_R2(X,Y,Z, void, dosomething2, aclass, aclass, aclass, i32*, aclass*) \
    imethod(X,Y,Z, num, dosomething1, aclass, aclass, aclass)
declare_class(bclass)
define_class(bclass, A)

# -> emits:
typedef struct aclass {
    short i;
} *aclass;

typedef struct bclass {
    array instances;
} *bclass;

typedef struct aclass_f {
    # ...
} *aclass_t;

typedef struct bclass_f {
    # ...
    void (*dosomething2)(bclass, aclass, aclass, aclass, i32*, aclass*);
    num (*dosomething1)(bclass);
} *bclass_t;

void bclass_dosomething2(bclass inst, aclass a, aclass another, aclass another2, i32* r0, aclass* r1) {
    M(array, push, instances, a) <- will increment ref

    # return 1, another2  (outputs)
    *r0 = 1;
    *r1 = (aclass)hold(another2)
    goto drop_args; 

    # for each argument of A-type
    drop_args:
    drop(a)
    drop(another)
    drop(another2)
}

num bclass_dosomething1(bclass inst) {
    aclass another = new(aclass);
    if (true) {
        aclass arg1 = new(aclass, with_num, 2);

        i32 v0;
        aclass v1;
        // each call into a method gives us more call scope to obtain arguments
        // the return args we leave outside and above 
        {
            // for each arg given:

            // compute _arg0 with a series of vars at each expression leaf
            // + addition on an instance is a method call, and here we are adding twice
            // each addition node will have a variable reference
            aclass _temp0 = M(aclass, add, arg1, another);
            aclass _temp1 = M(aclass, add, _temp0, another);
            drop(_temp0); // drop as we go through the enode series

            aclass _arg0 = _temp1;

            // compute _arg1 (this one is a simple variable reference, so hold)
            aclass _arg1 = hold(another);

            // compute _arg2 (this one was a new object expression)
            aclass _arg2 = new(aclass, with_num, 1);

            dosomething2(_arg0, _arg1, _arg2, &v0, &v1)
            // dropping here instead of the method call creates more code.
            // that is unless callers dont outnumber the functions.
            // they generally do by nature
        }

        num some_other = 2;
        // arg1 will drop here
        drop(arg1);

        // v1 will drop here (actually dropping arg2: aclass(1))
        drop(v1);
    }
    // another will drop here
    drop(another);
    return 1
}

##