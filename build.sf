import <stdio> as std

# this is a comment
cm:string = 'CMAKE'

if-def [ os == 'linux' ]
	os-args: {
		-DCLANG_DEFAULT_CXX_STDLIB=libstdc++
	}
else-if [ os == 'darwin' ]
	os-args: {
		-D{cm}_CXX_FLAGS="-stdlib=libc++"
		-DCLANG_DEFAULT_CXX_STDLIB=libc++
		-DDEFAULT_SYSROOT=$(xcrun --sdk macosx --show-sdk-path)
	}
else 
	os-args: {}

import [ https://github.com/llvm/llvm-project main ] {
	-S ../llvm
	-G Ninja 
	-DLLVM_ENABLE_ASSERTIONS=OFF
	-DLLVM_ENABLE_PROJECTS='clang;lld;lldb;compiler-rt'
	-DLLVM_TOOL_GOLD_BUILD=ON
	-DLLVM_ENABLE_FFI=OFF
	-DLLVM_ENABLE_THREADS=ON
	-DLLVM_PARALLEL_LINK_JOBS=1
	-DLLVM_BUILD_TOOLS=ON
	-DLLVM_ENABLE_LTO=OFF
	-DLLDB_INCLUDE_TESTS=OFF
	-DLLDB_EXPORT_ALL_SYMBOLS=1
	-DLLVM_ENABLE_RTTI=OFF
	-DLLVM_BINUTILS_INCDIR=/usr/include
	-DCLANG_DEFAULT_PIE_ON_LINUX=ON
	-DCLANG_CONFIG_FILE_SYSTEM_DIR=/etc/clang
	-DLLVM_ENABLE_LIBCXX=OFF
	-DBUILD_SHARED_LIBS=ON
	-DLLDB_ENABLE_PYTHON=OFF
	-DLLVM_TARGETS_TO_BUILD='host;X86;AArch64'
	-lm
	-lclang
	-lLLVMCore
	-lLLVMBitReader
	-lLLVMBitWriter
	-lLLVMIRReader
	-lLLVMSupport
	-lLLVMExecutionEngine
	-lLLVMTarget
	-lLLVMTargetParser
	-lLLVMTransformUtils
	-lLLVMAnalysis
	-lLLVMProfileData
	-lLLVMAArch64AsmParser
	-lLLVMAArch64CodeGen
	-lLLVMAArch64Desc
	-lLLVMAArch64Info
	-lLLVMAArch64Utils
	-lLLVMX86CodeGen
	-lLLVMX86AsmParser
	-lLLVMX86Desc
	-lLLVMX86Info
}

fn this-is-great[ i:int ] -> array [ int 10x2 ] [ 2 2, 4 4, 8 8, 2 2, 4 4, 2 2, 4 4, 8 8, 2 2, 4 4 ]
[
	std.printf[ 'this is %s..', 'great' ]
]

import ffi [ https://github.com/libffi/libffi e28a0d5 ]
	env: CC: 'gcc'

##
cflags {
	-fPIC
	-fmacro-backtrace-limit=0
	-Wno-write-strings
	-Wno-compare-distinct-pointer-types
	-Wno-deprecated-declarations
	-Wno-incompatible-pointer-types
	-Wno-shift-op-parentheses
	-Wfatal-errors
	-Wno-incompatible-library-redeclaration
	-fvisibility=default
}

lflags {
	-Wl,--as-needed
}
##

