import chatgpt [ model:'gpt-5' ]

#import <test.cc>

# we separate headers by comma if we want to include multiple in one line
import <stdio.h, ctype.h>

import KhronosGroup:Vulkan-Headers/main <vulkan/vulkan.h>

# import can ONLY be defined at the module level, never inside fn or classes
# here after its checked out, we run an > arb-command
import KhronosGroup:MoltenVK
    > ./fetchDependencies --macos
    -DANOTHER=2

import KhronosGroup:Vulkan-Loader
    -DSOMETHING=1

import KhronosGroup:Vulkan-Tools/main
    -DBUILD_CUBE=OFF

class Vulkan
	intern instance : VkInstance # interns are only seen by this module (not the object alone), public is default

    cast i32 -> i32[ 2 ] # casting method
    
    fn init[] -> none # none is an alias for void
        printf[ 'vulkan is loading...\n' ]
        vkCreateInstance [
            [ # temps are handled for you, and automatically referenced or given as literal depending on the type
                sType:      VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO
                pNext:      null
                flags:      0
                pApplicationInfo: [
                    sType:              VK_STRUCTURE_TYPE_APPLICATION_INFO # C definitions from macros available
                    pNext:              null
                    pApplicationName:   'vk-app'
                    applicationVersion: VK_MAKE_VERSION(1, 0, 0) # notice: macros use parenthesis
                    pEngineName:        'trinity'
                    engineVersion:      VK_MAKE_VERSION(1, 0, 0)
                    apiVersion:         VK_API_VERSION_1_3 
                ]
            ], null, ref instance # when giving a member variable, we must specify ref if it that type is required
        ]
        return # optional for void fn

# this is how we subclass in silver; base-type first, then our new type
# in this case, main is an abstract class to indicate we are an app, and not a library
main test_vulkan
    public  variable-name      : i32 [ 2 ] # these are not arrays, they are singular values; we use [ ] instead of ( ) for object construction
	public  queue_family_index : i32 [ 2 ] # local members in functions cannot specify public or intern
	intern  an_intern_member   : i64 [ 4 ]
  # intern  an_array		   : array <i32 4x2>  [ 4 2, 4 4, 2 2, 8 8 ] # this IS an array, we specify the container, type, and stride
  # intern  an_map             : map <i32 string> [ 1: 'a-value'  2: 'another' ] # this is a map (fifo-oriented)

    fn test_llm [] -> i32 using chatgpt
        'simply return 2 + 2, but before you return print a funny joke'

	fn init [ ] # default is none for return
		queue_family_index : 4
        i : 0

        printf [ "this is constant, and cannot receive {variables}, but we may still use with printf: %s", cstr[string[ i ]] ]

        while [ i < 2 ]
            i += 1
        
        # silver does not need new lines to parse separate statements, 
        # and we separate the fields by comma (unlike C which uses semi-colon)
        # two spaces is preferred for clarity
        for [ ii:0  b:i64[ 2 ], ii < 22, ii += 1  b += 1 ]
            puts [ 'ii is {ii}, b is {b}\n' ]
            